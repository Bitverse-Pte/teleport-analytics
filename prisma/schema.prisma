// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // important to support Prisma Query engine in Alpine linux
  // otherwise "Query engine binary for current platform "linux-musl" could not be found."
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LockMap {
  name      String   @id
  value     Boolean  @default(false)
  updatedAt DateTime @default(now()) @updatedAt

}

model DiscordGuild {
  id                String                  @id
  channels          DiscordChannel[]
  members           DiscordGuildMember[]
  discordGuildStats DiscordGuildStat[]
  guildDailyStats   DiscordGuildDailyStat[]
  rolesStat         DiscordGuildRolesStat[]
}

model DiscordGuildMember {
  id             String       @id
  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String
  messageQty     Int
  lastSeen       DateTime     @default(now()) @updatedAt

  joinedChannels DiscordChannel[]
}

model DiscordGuildStat {
  id Int @id @default(autoincrement())

  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String

  createdAt DateTime @default(now())

  totalMemberCount  Int @default(0)
  onlineMemberCount Int @default(0)
}

model DiscordGuildChannelStat {
  id Int @id @default(autoincrement())

  channel          DiscordChannel @relation(fields: [discordChannelId], references: [id])
  discordChannelId String

  createdAt DateTime @default(now())

  totalMemberCount Int @default(0)
}

enum DiscordChannelType {
  GUILD_TEXT
  DM
  GUILD_VOICE
  GROUP_DM
  GUILD_CATEGORY
  GUILD_NEWS
  GUILD_STORE
  // ...Array(3).fill(null),
  UNUSED1
  UNUSED2
  UNUSED3
  // 10
  GUILD_NEWS_THREAD
  GUILD_PUBLIC_THREAD
  GUILD_PRIVATE_THREAD
  GUILD_STAGE_VOICE
  GUILD_DIRECTORY
}

model DiscordChannel {
  id             String       @id
  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String

  name      String
  type      DiscordChannelType
  createdAt DateTime

  members      DiscordGuildMember[]
  channelStats DiscordGuildChannelStat[]

  DailyStats DiscordGuildChannelDailyStat[]
}

model DiscordGuildDailyStat {
  id    Int          @id @default(autoincrement())
  guild DiscordGuild @relation(fields: [discordGuildId], references: [id])
  date  DateTime     @default(now())

  startTotalMemberCount  Int @default(0)
  startOnlineMemberCount Int @default(0)

  endTotalMemberCount  Int @default(0)
  endOnlineMemberCount Int @default(0)

  highestOnlineMemberCount Int    @default(0)
  lowestOnlineMemberCount  Int    @default(0)
  discordGuildId           String
}

model DiscordGuildChannelDailyStat {
  id      Int            @id @default(autoincrement())
  channel DiscordChannel @relation(fields: [discordChannelId], references: [id])
  date    DateTime       @default(now())

  startTotalMemberCount Int @default(0)
  endTotalMemberCount   Int @default(0)

  highestTotalMemberCount Int    @default(0)
  lowestTotalMemberCount  Int    @default(0)
  discordChannelId        String
}

model DiscordGuildRolesStat {
  id   Int      @id @default(autoincrement())
  date DateTime @default(now())

  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String
  unicodeEmoji   String

  roleId String
  name   String
  count  Int
}

model TelegramGroup {
  id     Int     @id @default(autoincrement())
  chatId Decimal @db.Decimal(65, 0)

  // these data below are for display only, CHANGE them in Telegram side
  slow_mode_delay          Int? //	Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user; in seconds. Returned only in getChat.
  message_auto_delete_time Int? // Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in getChat.

  type        String? //	Type of chat, can be either “private”, “group”, “supergroup” or “channel”
  title       String? // Optional. Title, for supergroups, channels and group chats
  username    String? // Optional. Username, for private chats, supergroups and channels if available
  photo       String? // Optional. Chat photo. Returned only in getChat.
  invite_link String? //Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in getChat.
}

model TelegramChatMember {
  id      Int     @id @default(autoincrement())
  // telegram users id
  userId  Decimal @db.Decimal(65, 0)
  // groups id
  groupId Decimal @db.Decimal(65, 0)

  joinAt DateTime @default(now())

  messageCount Int      @default(0)
  lastSeen     DateTime @default(now())
  activeDays   Int      @default(0)
}

model TelegramGroupStats {
  id      Int     @id @default(autoincrement())
  // telegram group id
  groupId Decimal @db.Decimal(65, 0)

  date DateTime @default(now())

  activeMemberCount Int

  newMemberCount   Int
  messageCount     Int
  totalMemberCount Int
}

model TelegramGroupDailyStat {
  id      Int      @id @default(autoincrement())
  // telegram group id
  groupId Decimal  @db.Decimal(65, 0)
  date    DateTime @default(now())

  newMemberCount       Int
  activeNewMemberCount Int
  messageCount         Int
  // active member means anyone that send at least 1 message in group
  activeMemberCount    Int
  totalMemberCount     Int
}

model TwitterAccount {
  id           Int      @id @default(autoincrement())
  name         String
  username     String
  accountId    String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime

  followersCount Int @default(0)
  tweetCount     Int @default(0)
}

model TwitterAccountRealTimeStat {
  id               Int      @id @default(autoincrement())
  // TwitterAccount id
  twitterAccountId String
  date             DateTime @default(now())
  followersCount   Int      @default(0)
  followingCount   Int      @default(0)
  tweetCount       Int      @default(0)
  listedCount      Int      @default(0)

  @@index([twitterAccountId])
}

model TwitterAccountDailyStat {
  id                Int      @id @default(autoincrement())
  // TwitterAccount id
  twitterAccountId  String
  date              DateTime @default(now())
  followersCount    Int      @default(0)
  newFollowersCount Int      @default(0)
  tweetCount        Int      @default(0)
  newTweetCount     Int      @default(0)

  @@index([twitterAccountId])
}

model Tweet {
  id               Int      @id @default(autoincrement())
  tweetId          String   @unique
  // TwitterAccount id
  twitterAccountId String
  createdAt        DateTime
  // text record the substring(0, 100) for a tweet, we don't need all content
  text             String

  impressions       Int @default(0)
  retweets          Int @default(0)
  quoteTweets       Int @default(0)
  likes             Int @default(0)
  replies           Int @default(0)
  urlLinkClicks     Int @default(0)
  userProfileClicks Int @default(0)
  videoViews        Int @default(0)

  @@index([twitterAccountId, tweetId])
}

model TweetsDailyStat {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  tweetsCount Int      @default(0)

  impressions       Int @default(0)
  retweets          Int @default(0)
  quoteTweets       Int @default(0)
  likes             Int @default(0)
  replies           Int @default(0)
  urlLinkClicks     Int @default(0)
  userProfileClicks Int @default(0)
  videoViews        Int @default(0)
}

model TweetRealTimeStat {
  id      Int      @id @default(autoincrement())
  tweetId String
  date    DateTime @default(now())

  impressions       Int @default(0)
  retweets          Int @default(0)
  quoteTweets       Int @default(0)
  likes             Int @default(0)
  replies           Int @default(0)
  urlLinkClicks     Int @default(0)
  userProfileClicks Int @default(0)
  videoViews        Int @default(0)

  @@index([tweetId])
}
