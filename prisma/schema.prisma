// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DiscordGuild {
  id       String               @id
  channels DiscordChannel[]
  members  DiscordGuildMember[]
}

model DiscordGuildMember {
  id             String       @id
  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String
  messageQty     Int
  lastSeen       DateTime @default(now()) @updatedAt
}

enum DiscordChannelType {
  GUILD_TEXT
  DM
  GUILD_VOICE
  GROUP_DM
  GUILD_CATEGORY
  GUILD_NEWS
  GUILD_STORE
  // ...Array(3).fill(null),
  UNUSED1
  UNUSED2
  UNUSED3
  // 10
  GUILD_NEWS_THREAD
  GUILD_PUBLIC_THREAD
  GUILD_PRIVATE_THREAD
  GUILD_STAGE_VOICE
  GUILD_DIRECTORY
}

model DiscordChannel {
  id             String       @id
  guild          DiscordGuild @relation(fields: [discordGuildId], references: [id])
  discordGuildId String

  name           String
  type           DiscordChannelType
  createdAt      DateTime
}

model TelegramGroup {
  id    Int @default(autoincrement()) @id
  chatId Decimal @db.Decimal(65, 0)
}

model TelegramChatMember {
  id    Int @default(autoincrement()) @id
  // telegram users id
  userId Decimal @db.Decimal(65, 0)
  // groups id
  groupId Decimal @db.Decimal(65, 0)

  joinAt DateTime @default(now())

  messageCount Int @default(0)
  lastSeen DateTime @default(now())
  activeDays Int @default(0)
}

model TelegramGroupDailyStat {
  id    Int     @default(autoincrement()) @id
  // telegram group id
  groupId Decimal @db.Decimal(65, 0)
  date  DateTime @default(now())

  newMemberCount Int
  activeNewMemberCount Int
  messageCount Int
  // active member means anyone that send at least 1 message in group
  activeMemberCount Int
  totalMemberCount Int
}

model TwitterAccount {
    id Int @default(autoincrement()) @id
    name String
    accountId String @unique
}

model TwitterAccountRealTimeStat {
    id Int @default(autoincrement()) @id
    // TwitterAccount id
    twitterAccountId Int
    date DateTime @default(now())
    followersCount Int
}

model TwitterAccountDailyStat {
    id Int @default(autoincrement()) @id
    // TwitterAccount id
    twitterAccountId Int
    date DateTime @default(now())
    followersCount Int
    newFollowersCount Int
    tweetCount Int
}

model Tweet {
    id Int @default(autoincrement()) @id
    tweetId String
    // TwitterAccount id
    twitterAccountId Int
    createdAt DateTime
    text String
}

model TweetsDailyStat {
    id Int @default(autoincrement()) @id
    date DateTime @default(now())
    tweetsCount Int
    impressions Int
    retweets Int
    quoteTweets Int
    likes Int
    Replies Int
    urlLinkClicks Int
    userProfileClicks Int
    videoViews Int
}

model TweetRealTimeStat {
    id Int @default(autoincrement()) @id
    tweetID String
    date DateTime @default(now())
    impressions Int
    retweets Int
    quoteTweets Int
    likes Int
    Replies Int
    urlLinkClicks Int
    userProfileClicks Int
    videoViews Int
}
